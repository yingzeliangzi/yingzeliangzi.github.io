<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>记录第一次Steam极多线程下载游戏</title>
      <link href="/2023-07-23-steam-multi/"/>
      <url>/2023-07-23-steam-multi/</url>
      
        <content type="html"><![CDATA[<p>众所周知Steam下载是通过CDN为用户提供下载游戏服务<br>CDN域名对照表见<a href="https://www.dogfight360.com/blog/knowledge-base/%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98steam%E7%9A%84%E4%B8%8B%E8%BD%BD%E9%80%9F%E5%BA%A6%E4%B8%AD%E5%9B%BD%E5%A4%A7%E9%99%86%E5%9C%B0%E5%8C%BA/">羽翼城个人博客-如何提高Steam的下载速度</a></p><p>今天早上在下载PUBG的时候 看到Clash内Connection出现了大批量裸IP直连 800+条连接 平时不可能这么多 所以我怀疑是不是哪里出问题了导致内网循环<br>思考了一阵子也没有开什么其他的软件 于是锁定了Steam<br>但是我一般api.steampowered.com域名(用于检测IPCountry)会走代理<br>所以下载的CDN一般是分配到V社的steamcontent.com<br>但是今天开机自启动似乎Steam比Clash更快一些 于是没有走代理 IPCountry就变成了CN<br>理所当然CDN就分配到国内 我一般是阿里云xz.pphimalayanrt.com 有时候走白山云st.dl.eccdnx.com<br>我在Clash的Connection内按下载速度排序 隐隐约约看到了xz.pphimalayanrt.com 但是下载速度2-3M&#x2F;s<br>可是我Steam内下载显示下载速度在80M&#x2F;s左右浮动 如图<br><img src="/pic/2023-07-23-steam-multi/steam-download.png" alt="steam-download"></p><p>我先打开控制台steam:&#x2F;&#x2F;open&#x2F;console<br>然后使用download_sources查看下载分配的域名以及速度<br><img src="/pic/2023-07-23-steam-multi/download-sources.jpg" alt="download-sources"><br>好家伙 白山云域名st.dl.eccdnx.com下载速度60+M&#x2F;s 但是我在Connection里面却看不到这个域名啊</p><p><img src="/pic/2023-07-23-steam-multi/clash-before.png" alt="clash-before"><br>我先随便取两个IP 拿到ping0.cc搜索 基本都是我所在省份的家庭宽带IP 根本没见到机房IDC的IP<br>而且再加上随机的端口 而不是80&#x2F;443或者一些有规律的端口<br>我就怀疑是类似BT的P2P传输 而且PUBG算是挺热门的游戏了<br>而且我的下载速度不稳定 最开始在20-80M&#x2F;s 后面才80M&#x2F;s浮动</p><p>以下是一些猜测<br>下载其他游戏的时候 也有可能是下载CDN没分配到白山云 我觉得更有可能是我玩的其他游戏冷门一些 阿里云CDN服务器下载速度快很多 白山云就没走极多线程 直接去他们域名的CDN服务器下载的<br>之前就有听闻说Steam的下载部分是搞BT的大佬做的 我觉得这次更多是白山云那边整的新活 毕竟其他CDN都在正常工作(指从自家CDN服务器提供下载)</p><p>下载完成后Connection数量恢复正常<br><img src="/pic/2023-07-23-steam-multi/clash-after.png" alt="clash-after"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>新版Steam更新后 在Steam或SteamLauncher快捷方式后添加-vgui参数可以回到旧版UI 正常使用皮肤</title>
      <link href="/2023-06-27-steam-old-ui-skin/"/>
      <url>/2023-06-27-steam-old-ui-skin/</url>
      
        <content type="html"><![CDATA[<p>此举例使用 <a href="https://github.com/Jack-Myth/Threshold-Miku">Jack-Myth&#x2F;Threshold-Miku</a> 皮肤</p><h1 id="右键Steam或SteamLauncher属性"><a href="#右键Steam或SteamLauncher属性" class="headerlink" title="右键Steam或SteamLauncher属性"></a>右键Steam或SteamLauncher属性</h1><p><em>SteamLauncher.exe是之前Steam修改了库的css代码 导致无法正常使用皮肤 大佬做的皮肤启动器</em><br>直接在目标后面加空格 输入-vgui 如下<br><img src="/pic/2023-06-27-steam-old-ui-skin/shortcut-properties.jpg" alt="shortcut-properties"><br>如果是原版Steam快捷方式 也同理<br><img src="/pic/2023-06-27-steam-old-ui-skin/shortcut-properties-or.jpg" alt="shortcut-properties"></p><h2 id="示例图-包括Steam登录-x2F-Steam商店都是原版UI-但是退出的动画是新版UI"><a href="#示例图-包括Steam登录-x2F-Steam商店都是原版UI-但是退出的动画是新版UI" class="headerlink" title="示例图 包括Steam登录&#x2F;Steam商店都是原版UI 但是退出的动画是新版UI"></a>示例图 包括Steam登录&#x2F;Steam商店都是原版UI 但是退出的动画是新版UI</h2><p><img src="/pic/2023-06-27-steam-old-ui-skin/steam-old-ui.jpg" alt="steam-old-ui"></p><h1 id="附加-如何开机启动带皮肤的Steam"><a href="#附加-如何开机启动带皮肤的Steam" class="headerlink" title="附加: 如何开机启动带皮肤的Steam"></a>附加: 如何开机启动带皮肤的Steam</h1><h2 id="前因"><a href="#前因" class="headerlink" title="前因"></a>前因</h2><p>平时打游戏爱好为主 所以开机选择自动启动Steam 虽然内存占用多一点 有时候达到300M 但是不怎么吃CPU 就一直放着了<br>但是如果是加了启动项 和 使用大佬自制皮肤启动器 该如何设置呢?</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>使用Windows自带的计划任务(Task Scheduler)<br>右键此电脑-管理(This PC-Manage) 点进Task Scheduler Library<br><img src="/pic/2023-06-27-steam-old-ui-skin/task-scheduler-library.jpg" alt="task-scheduler-library"><br>选择新建任务(Create Task…)</p><h3 id="General"><a href="#General" class="headerlink" title="General"></a>General</h3><p>名称和描述随便填写 自己认识即可 无需英文<br>安全选项第一个即可 当你的用户登录时<br><img src="/pic/2023-06-27-steam-old-ui-skin/create-task-general.jpg" alt="general"></p><h3 id="Triggers"><a href="#Triggers" class="headerlink" title="Triggers"></a>Triggers</h3><p>点击下面的新建(New…)<br>在最上面选择触发条件 在用户登录时(At log on)<br>下面的启用(Enable)会自动勾选<br><img src="/pic/2023-06-27-steam-old-ui-skin/create-task-trigger.jpg" alt="trigger"><br>然后点击确定</p><h3 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h3><p>点击下面的新建(New…)<br>选择默认的Action-打开一个应用(Start a program)<br>程序或脚本选择Steam或SteamLauncher(选择快捷方式也可以)<br>下面的附加选项(Arguments)填入”-vgui”无需空格<br><img src="/pic/2023-06-27-steam-old-ui-skin/create-task-action.jpg" alt="action"></p><p>最后确定创建 记得在任务管理器-启动或者Steam内关闭它的自动启动(不是我们创建的这个任务)<br>后面的选项不用管了 如果出现笔记本电脑有时候电池无法自动启动Steam的话<br>检查创建任务的第四步(Conditions) 文中没有提到<br>取消勾选电源里面的如果电脑转为电池供电则停止任务(Stop if the computer switches to battery power)<br>如果不想开机启动 再来计划任务把你之前设置的名称指定的任务删除即可 或者disable掉</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>代理导致各类游戏网络问题合集</title>
      <link href="/2023-06-25-game-network-error/"/>
      <url>/2023-06-25-game-network-error/</url>
      
        <content type="html"><![CDATA[<h1 id="彩虹六号-围攻"><a href="#彩虹六号-围攻" class="headerlink" title="彩虹六号:围攻"></a>彩虹六号:围攻</h1><h2 id="无法登录报错3-0x0001000b"><a href="#无法登录报错3-0x0001000b" class="headerlink" title="无法登录报错3-0x0001000b"></a>无法登录报错3-0x0001000b</h2><p>关闭Clash&#x2F;Nekoray&#x2F;V2rayN的TUN模式或Netch!! 临时改用系统代理并开启其他加速器!!</p><h1 id="VRChat"><a href="#VRChat" class="headerlink" title="VRChat"></a>VRChat</h1><h2 id="卡登录不进World-x2F-切换World时报错The-world-is-not-compatible-with-your-platform"><a href="#卡登录不进World-x2F-切换World时报错The-world-is-not-compatible-with-your-platform" class="headerlink" title="卡登录不进World &#x2F; 切换World时报错The world is not compatible with your platform"></a>卡登录不进World &#x2F; 切换World时报错The world is not compatible with your platform</h2><p>这个不是World不支持你所在平台的问题 即使你尝试返回Home或Default Home也报错这个问题<br>是因为VRChat在用UDP协议对接api.vrchat.com时出现了错误 因为你的TUN模式&#x2F;系统代理选择的节点不能使用UDP协议<br>正常来说一般应用程序TCP会走系统代理 游戏所使用的UDP不会走系统代理 而是无视直接走网卡直连 但是这个游戏逆天一点</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>如果你的节点支持UDP协议 那么在Clash中Proxies添加”udp: true” 保存后该节点下面会有一个UDP的标识 就可以正常游玩了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows系统使用傲梅工具迁移后产生的问题</title>
      <link href="/2023-06-24-windows-aomei-move/"/>
      <url>/2023-06-24-windows-aomei-move/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>因为笔记本更换了硬盘，所以系统盘也需要跟着换，就用了第三方PE内置的傲梅分区工具迁移系统<br>平时经常使用休眠(Hibernate)功能，不需要关机就能保存未完成的工作，比关机开机更方便一些，数据是存储在硬盘中，启动的时候再调用到内存中，并不费电<br>但是自从系统迁移后，晚上工作未完成第二天早上要唤醒的时候，总是重新开机，一开始我以为是没休眠成功，导致系统还在工作，把电量耗完了(学校宿舍晚上断电)<br>但是端午期间回家也出现了这个问题，可是疑惑的点在于我家并不会断电<br>于是我尝试休眠后立即唤醒，果然，还是从0启动系统<br>上网搜了一圈，是傲梅迁移系统的时候ESP分区出了问题</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p><em>不需要PE盘，但是期间不要重启电脑</em><br>使用Diskgenius等分区工具，将引导的ESP分区格式化，它会自动分配一个盘符如G:<br>打开Windows Powershell(Administrator)，输入<br>bcdboot C:\Windows(系统所在位置) &#x2F;s G:(ESP分区的盘符) &#x2F;f uefi &#x2F;l zh-cn(语言,可选)<br>然后Restart重启电脑一次，如果使用Power Off或者Hibernate是不行的，因为需要重启生效，如果选了这两种还会自动开机&#x2F;唤醒，然后你就不得不Restart<br>最后发现问问题已经解决，将ESP分区指派的盘符删除即可</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Purple Software Galgame解包</title>
      <link href="/2023-06-23-purple-software-unpack/"/>
      <url>/2023-06-23-purple-software-unpack/</url>
      
        <content type="html"><![CDATA[<p>举例游戏为 <a href="https://www.gog.com/game/amatsutsumi">天津罪 Amatsutsumi[GOG]</a></p><h1 id="关于video文件夹内OP的cmv文件提取视频"><a href="#关于video文件夹内OP的cmv文件提取视频" class="headerlink" title="关于video文件夹内OP的cmv文件提取视频"></a>关于video文件夹内OP的cmv文件提取视频</h1><h2 id="下载extractor"><a href="#下载extractor" class="headerlink" title="下载extractor"></a>下载extractor</h2><p><a href="https://dl.0251520.xyz/files/website/resource/extractor.zip">下载链接</a></p><h2 id="更改语言"><a href="#更改语言" class="headerlink" title="更改语言"></a>更改语言</h2><p>默认语言是Russian 可能会显示为乱码<br>进入第三个选项 更改语言为English即可<br><img src="/pic/2023-06-23-purple-software-unpack/options.jpg" alt="option"></p><h2 id="转换cmv文件"><a href="#转换cmv文件" class="headerlink" title="转换cmv文件"></a>转换cmv文件</h2><p>右上角Select 选择单文件即可<br>Formats点击下方Load按键 选择Sounds.fmt(别选错了!!不是Video.fmt)<br><img src="/pic/2023-06-23-purple-software-unpack/formats.jpg" alt="formats"><br>点击Start 搜索到一个ogg(音频)和一个ogm文件(视频)<br><img src="/pic/2023-06-23-purple-software-unpack/founded.jpg" alt="founded"><br>用软件(如格式工厂)合成到一起即可</p><h1 id="关于pack文件夹内bg及voice等文件的提取"><a href="#关于pack文件夹内bg及voice等文件的提取" class="headerlink" title="关于pack文件夹内bg及voice等文件的提取"></a>关于pack文件夹内bg及voice等文件的提取</h1><h2 id="下载vn-tools大佬开源的arc-unpacker-并解压到任意位置"><a href="#下载vn-tools大佬开源的arc-unpacker-并解压到任意位置" class="headerlink" title="下载vn-tools大佬开源的arc_unpacker 并解压到任意位置"></a>下载vn-tools大佬开源的arc_unpacker 并解压到任意位置</h2><p><a href="https://github.com/vn-tools/arc_unpacker/releases">https://github.com/vn-tools/arc_unpacker/releases</a></p><h2 id="具体使用方法见文档"><a href="#具体使用方法见文档" class="headerlink" title="具体使用方法见文档"></a>具体使用方法见文档</h2><p>在解压后的文件夹内Shift+右键 Open command window here并输入<br>arc_unpacker D:\Amatsutsumi\data\pack\voice.cpz(文件位置，可以直接拖进cmd快速输入) --dec&#x3D;purple-software&#x2F;cpz6(解码方式，此处我使用cpz6)</p><h2 id="Purple-Software此软件的所有可解码格式"><a href="#Purple-Software此软件的所有可解码格式" class="headerlink" title="Purple Software此软件的所有可解码格式"></a>Purple Software此软件的所有可解码格式</h2><ul><li>purple-software&#x2F;cpz5</li><li>purple-software&#x2F;cpz6</li><li>purple-software&#x2F;pb3</li><li>purple-software&#x2F;ps2</li></ul><p>可以自行使用”arc_unpacker -d&#x3D;”指令查看所有支持的后缀名</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Steam如何跳过游戏更新教程 例:Beat Saber</title>
      <link href="/2023-06-14-skip-update-steam-games-beatsaber/"/>
      <url>/2023-06-14-skip-update-steam-games-beatsaber/</url>
      
        <content type="html"><![CDATA[<p>tip.此方法应该也适用其他大部分不更新也能正常游玩的单机游戏</p><h1 id="前因"><a href="#前因" class="headerlink" title="前因"></a>前因</h1><p>今天早上Beat Saber更新了 正好想着写写如何跳过更新的文章<br><img src="/pic/2023-06-14-skip-update-steam-games-beatsaber/update-waiting.jpg" alt="update-waiting"><br>由于平时经常打VR游戏节奏光剑 大部分人都会打Mods 能够增强游戏性<br>可以添加很多自定义歌曲 也就是社区大佬自制谱给大家拿出来玩 也有人做了一个排行榜网站 插件内置到游戏可以自己上传 其他功能包括一些修改人物、场景、方块模型 或者修改方块出现的反应时间<br>官方是不封杀Mod的 也并不是有意使Mod失效的 但是每次更新一个小版本 即使是更新了一两首歌曲 也会导致Mod失效 而且各个版本Mod不互通 这就需要等模组制作大佬们更新 一般1-7天<br>期间如果想玩的话 只能在没有Mod的情况下游玩 或者部分大佬更新了部分模组这样玩<br>我之前刚入坑这个游戏的时候不怎么懂 但是游戏已经更新了 就上网搜大佬的解决方法 做法是<br>在更新之前备份原整个游戏的目录 更新之后再把新的文件夹删掉 把原目录改名为游戏目录<br>如果更新完了已经不可挽回的话 就备份歌曲文件夹、场景文件夹、人物模型、之前打歌的成绩数据(userdata)文件夹 然后使用Steam自带的download_depot来返回原版本<br>但是像我这种下了1000+首歌的人很不友好 而且文件很多很碎 文件夹也占了20个G<br><img src="/pic/2023-06-14-skip-update-steam-games-beatsaber/folder.jpg" alt="folder"></p><h1 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h1><p>首先如果你想让某个游戏不自动更新 右键该游戏点击属性-更新<br><img src="/pic/2023-06-14-skip-update-steam-games-beatsaber/properties.jpg" alt="properties"><br>于是我想了想所有方法归根结底的解决方案 不就是把app的manifest id改成最新的就可以了 上面的原理也是这样<br>Steam检查软件&#x2F;游戏的更新不会去扫你每个游戏目录和最新版是否一样 都会在更新前或者更新后对app进行标记 所以每次只需要对比本地的manifest和官方服务器最新的manifest版本是否一致即可 我可能说的不太明白<br>先打开Beat Saber对应的app manifest文件 位于steamapps目录下<br>登录steamdb搜索Beat Saber或者Steam商店找到该游戏 先获取它的appid<br><img src="/pic/2023-06-14-skip-update-steam-games-beatsaber/steamdb.jpg" alt="steamdb"><br>看到对应的appid是620980 去找这个appmanifest_620980.acf文件<br><img src="/pic/2023-06-14-skip-update-steam-games-beatsaber/620980-acf.jpg" alt="620980-acf"><br>双击记事本打开后里面有很多内容<br><img src="/pic/2023-06-14-skip-update-steam-games-beatsaber/acf-before.jpg" alt="acf-before"><br>其中”StageFlags”为4的时候 意思是该app已经完全安装 其他值的时候都没有是完全安装的最新版 具体数值对应意思可查询(<a href="https://github.com/lutris/lutris/blob/master/docs/steam.rst">https://github.com/lutris/lutris/blob/master/docs/steam.rst</a>)<br>如果更新启动了 它有一个副作用是会更改BytesDownloaded 这几个参数都是明面意思 代表着需要下载多少字节、已下载多少字节<br>我们可以先打开并参考其他已是最新版本的游戏manifest文件查看数值 BytesToDownload和BytesDownloaded会是对应相同的 BytesToStage和BytesStaged也是对应相同的<br>我们把他们都改为0 也就是不需要下载 并把”StageFlags”值改为4<br>然后我们看到下面这个app还对应了一个depot 我们前往steamdb搜索Beat Saber 点击左方的Depots<br><img src="/pic/2023-06-14-skip-update-steam-games-beatsaber/steamdb-depots.jpg" alt="steamdb-depots"><br>里面有一个对应的depot id 620981 这个是游戏本体 点620981这串id会进到下一个页面<br><img src="/pic/2023-06-14-skip-update-steam-games-beatsaber/steamdb-manifests.jpg" alt="steamdb-manifests"><br>点击左方的Manifests 可以看到历史版本的各个manifest数值 我们复制13小时前更新的最新的”676582354127623831” 粘贴到之前acf文件里的manifest参数 size甚至不用更改<br><img src="/pic/2023-06-14-skip-update-steam-games-beatsaber/acf-after.jpg" alt="acf-after"><br>文件更改到这里就完成了 Ctrl+S进行保存 然后我们退出Steam并重新启动 让它重新加载我们更改过的manifest文件<br><img src="/pic/2023-06-14-skip-update-steam-games-beatsaber/update-complete.jpg" alt="update-complete"><br>可以看到Beat Saber已经不在更新列表了 我们也是可以正常启动不会触发更新的 感谢您看到这里</p><p>其实理论上可以做一个小程序的 但是技术力不是很好哈哈哈</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Demo</title>
      <link href="/2023-06-08-demo/"/>
      <url>/2023-06-08-demo/</url>
      
        <content type="html"><![CDATA[<h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Steam游戏快捷方式图标白纸修复(用于缓存图标文件消失)</title>
      <link href="/2023-06-06-steam-icon-fix/"/>
      <url>/2023-06-06-steam-icon-fix/</url>
      
        <content type="html"><![CDATA[<h1 id="前因"><a href="#前因" class="headerlink" title="前因"></a>前因</h1><p>由于某些原因 有时候电脑重装或者Steam图标缓存删掉 会导致游戏快捷方式变成白纸图标<br>啊 那有人问了 你电脑重装了为什么还有游戏快捷方式啊<br>因为桌面文件和Steam与Windows系统不在一个盘内 游戏快捷方式都放在桌面的Games文件夹里了<br><img src="/pic/2023-06-06-steam-icon-fix/desktop-game-folder-before.jpg" alt="game-folder-before"><br>那很多白纸怎么修复呢 这个和网上流传的普通的问题不一样<br>大多数人是因为Local文件夹下缓存的IconCache.db出了问题(Windows老毛病)<br>一般都是删除后重启资源管理器Explorer让它重新生成即可<br>你打开任意一个游戏的快捷方式可以看出来 它的图标来源是Steam文件夹内&#x2F;steam&#x2F;game&#x2F;里面缓存的图标<br><img src="/pic/2023-06-06-steam-icon-fix/lnk-notepad.jpg" alt="lnk-notepad"><br>那这些图标哪里来的呢 是当你下载这个游戏的时候顺带给你下载的<br>这时候有人问了 那我平时在库里不就能看到我库里游戏的图标吗 这不是缓存下来了吗<br>你说的对 但是库里的游戏图标&#x2F;banner的位置在Steam文件夹内&#x2F;appcache&#x2F;librarycache&#x2F; 而且命名都是Appid 不能直接复制拿来修复这个问题<br><img src="/pic/2023-06-06-steam-icon-fix/librarycache-folder.jpg" alt="librarycache-folder"><br>这时候在Github上翻到了一个跟我想法一致的一个repository</p><p><em>正好这次Steam又因为新版的某些原因(该死的steamwebhelper)重装了 图标缓存文件全部消失 因此写此文章</em></p><p><em>如果你不会删除IconCache.db 该repository也提供了一键删除Windoos图标缓存的批处理文件</em></p><h1 id="使用截图"><a href="#使用截图" class="headerlink" title="使用截图"></a>使用截图</h1><p><img src="/pic/2023-06-06-steam-icon-fix/run.jpg" alt="run"><br><img src="/pic/2023-06-06-steam-icon-fix/desktop-game-folder-after.jpg" alt="game-folder-after"></p><h1 id="repository地址"><a href="#repository地址" class="headerlink" title="repository地址"></a>repository地址</h1><p>本家: <a href="https://github.com/wordpress219/steam-icon-fix">https://github.com/wordpress219/steam-icon-fix</a><br>yingzeliangzi分支: <a href="https://github.com/yingzeliangzi/steam-icon-fix/tree/main">https://github.com/yingzeliangzi/steam-icon-fix/tree/main</a></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="用途：修复Steam创建的桌面快捷方式丢失-白图标-的异常情况"><a href="#用途：修复Steam创建的桌面快捷方式丢失-白图标-的异常情况" class="headerlink" title="用途：修复Steam创建的桌面快捷方式丢失(白图标)的异常情况"></a>用途：修复Steam创建的桌面快捷方式丢失(白图标)的异常情况</h2><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><h3 id="方法一（内置环境，推荐）："><a href="#方法一（内置环境，推荐）：" class="headerlink" title="方法一（内置环境，推荐）："></a>方法一（内置环境，推荐）：</h3><p>1、下载Release中的程序包压缩文件（当前仅支持Windows系统），并解压<br>2、运行main.exe，程序会自动弹出命令窗口并扫描Steam安装目录&#x2F;库目录，然后自动下载图标</p><h3 id="方法二（编程方法）："><a href="#方法二（编程方法）：" class="headerlink" title="方法二（编程方法）："></a>方法二（编程方法）：</h3><p>1、安装Python2.7以上或Python3.4以上的发行版本（推荐使用Python3）<br>2、运行pip install steam[client]，安装依赖项，如果存在系统代理无法下载需加入条件 –proxy&#x3D;127.0.0.1:端口<br>3、cd到代码文件夹所在目录下(或Shift+右键文件夹空白部分在这里打开命令行)，执行python main.py，程序会自动弹出命令窗口并扫描Steam安装目录&#x2F;库目录，然后自动下载图标  </p><h2 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h2><p>1、程序首先自动按盘符字母顺序扫描默认的Steam安装目录(每个盘符下的”Program Files (x86)&#x2F;Steam”, “Program Files&#x2F;Steam”, “Steam”文件夹)有无steam.exe文件，有则作为Steam的安装目录<br>2、若程序未在默认目录下发现Steam安装，需要用户手动指定Steam的安装目录，即steam.exe文件所在文件夹，并进行校验直到找到steam.exe文件<br>3、程序会自动扫描Steam安装目录下steamapps文件夹中的Steam库配置文件libraryfolders.vdf（保存Steam库的位置和游戏的APPID），并读取所有游戏的APPID，若该文件损坏则无法修复<br>4、扫描完成后程序会自动按照APPID检测Steam安装目录下steam&#x2F;games中对应的游戏图标是否已经存在，若存在则跳过，否则在Steam网站上查询游戏的客户端图标并下载，下载完成后会提示状态  </p><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p>1、当前版本仅支持Windows系统<br>2、有些游戏在Steam商店上架时没有提供对应的中文名称翻译，因此这些游戏将直接显示英文名称<br>3、如果有些应用或游戏没有提供客户端图标（很罕见，几乎没有），下载时将会直接跳过并提示，Steam常见再发行文件会被自动跳过且不提示<br>4、建议使用代理的用户手动配置环境变量，否则访问Steam网站时会出现SSL EOF错误8，设置方法：<br>(1)Windows系统：在控制面板中打开高级系统设置（win8以上可以直接用搜索），选择环境变量，在用户变量中添加两条：变量名1：HTTP_PROXY，变量值1：包括协议的代理服务器地址；变量名2：HTTPS_PROXY，变量值2：包括协议的代理服务器地址<br>(2)注意：如果代理软件&#x2F;服务器不支持HTTPS&#x2F;FTP代理，只支持HTTP&#x2F;SOCKS，请将协议设置为其中之一，如Clash(CFW)，设置为”<a href="http://127.0.0.1::7890">http://127.0.0.1::7890</a>“ 或 “socks5:&#x2F;&#x2F;127.0.0.1::7890”开头的地址<br>5、修复完成之后一般刷新几下图标即可恢复正常，或者下载代码&#x2F;tool中的rebuild_icon_cache.bat文件重建图标缓存<br>6、如下载图标后快捷方式仍为白图标，在Steam中右键游戏重新创建快捷方式，由于部分App更换新图标，旧快捷方式的clienticon需要更新，如100% Orange Juice!<br><font color=red>强烈推荐使用Clash的TUN模式 避免大多数网络问题</font></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> vdf</span><br><span class="line"><span class="keyword">from</span> steam.client <span class="keyword">import</span> SteamClient</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlretrieve</span><br><span class="line"></span><br><span class="line">cloudflare_icon_url = <span class="string">&quot;https://cdn.cloudflare.steamstatic.com/steamcommunity/public/images/apps/&quot;</span></span><br><span class="line">steam_folder_finder = [<span class="string">&#x27;Program Files/Steam&#x27;</span>,<span class="string">&#x27;Program Files(x86)/Steam&#x27;</span>,<span class="string">&#x27;Steam&#x27;</span>]</span><br><span class="line">disk_all = []</span><br><span class="line">game_list = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_disklist</span>():</span><br><span class="line">    <span class="keyword">global</span> disk_all</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> string.ascii_uppercase:</span><br><span class="line">        disk = c + <span class="string">&#x27;:\\&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(disk):</span><br><span class="line">            disk_all.append(disk)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_steam_vdf</span>():</span><br><span class="line">    <span class="keyword">global</span> steam_vdf</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> disk_all:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> steam_folder_finder:</span><br><span class="line">            <span class="keyword">if</span> os.path.exists(os.path.join(i,j,<span class="string">&#x27;steamapps&#x27;</span>,<span class="string">&#x27;libraryfolders.vdf&#x27;</span>)) <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">                steam_vdf = os.path.join(i,j,<span class="string">&#x27;steamapps&#x27;</span>,<span class="string">&#x27;libraryfolders.vdf&#x27;</span>)</span><br><span class="line">                <span class="keyword">global</span> steam_icon_folder</span><br><span class="line">                steam_icon_folder = os.path.join(i,j,<span class="string">&#x27;steam&#x27;</span>,<span class="string">&#x27;games&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_gamelist</span>():</span><br><span class="line">    <span class="keyword">global</span> steam_vdf</span><br><span class="line">    <span class="keyword">global</span> game_list</span><br><span class="line">    vdf_data = vdf.load(<span class="built_in">open</span>(steam_vdf))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(vdf_data[<span class="string">&#x27;libraryfolders&#x27;</span>].keys())):</span><br><span class="line">        i_game_list = <span class="built_in">list</span>(vdf_data[<span class="string">&#x27;libraryfolders&#x27;</span>][<span class="built_in">str</span>(i)][<span class="string">&#x27;apps&#x27;</span>].keys())</span><br><span class="line">        game_list.extend(i_game_list)</span><br><span class="line">    <span class="comment">#print(game_list)</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_icon</span>():</span><br><span class="line">    client = SteamClient()</span><br><span class="line">    client.anonymous_login()</span><br><span class="line">    <span class="keyword">assert</span> client.logged_on</span><br><span class="line">    <span class="keyword">for</span> app_id <span class="keyword">in</span> game_list:</span><br><span class="line">        app_id = <span class="built_in">int</span>(app_id)</span><br><span class="line">        game_info = (client.get_product_info(apps=[app_id, ]))[<span class="string">&#x27;apps&#x27;</span>][app_id][<span class="string">&#x27;common&#x27;</span>]</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            game_name = game_info[<span class="string">&quot;name_localized&quot;</span>][<span class="string">&quot;english&quot;</span>]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            game_name = game_info[<span class="string">&quot;name&quot;</span>]</span><br><span class="line">        <span class="keyword">if</span> game_info[<span class="string">&quot;name&quot;</span>] == <span class="string">&quot;Steamworks Common Redistributables&quot;</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;clienticon&quot;</span> <span class="keyword">in</span> <span class="built_in">list</span>(game_info.keys()):</span><br><span class="line">            <span class="keyword">if</span> os.path.exists(os.path.join(steam_icon_folder, game_info[<span class="string">&quot;clienticon&quot;</span>] + <span class="string">&#x27;.ico&#x27;</span>)):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;# %s \t\tICON ALREADY EXISTS, SKIP.&quot;</span> % game_name)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            game_icon_url = cloudflare_icon_url + <span class="built_in">str</span>(app_id) + <span class="string">&quot;/&quot;</span> + game_info[<span class="string">&quot;clienticon&quot;</span>] + <span class="string">&#x27;.ico&#x27;</span></span><br><span class="line">            game_icon_filename = os.path.join(steam_icon_folder, game_info[<span class="string">&quot;clienticon&quot;</span>] + <span class="string">&#x27;.ico&#x27;</span>)</span><br><span class="line">            urlretrieve(game_icon_url, game_icon_filename)</span><br><span class="line">            <span class="keyword">if</span> os.path.exists(game_icon_filename):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;# %s \t\tICON DOWNLOAD SUCCESSFUL.&quot;</span> % game_name)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;# %s \t\tICON DOWNLOAD FAILED.&quot;</span> % game_name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;# %s \t\tDON&#x27;T HAVE ICON, SKIP.&quot;</span> % game_name)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    get_disklist()</span><br><span class="line">    get_steam_vdf()</span><br><span class="line">    get_gamelist()</span><br><span class="line">    get_icon()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Steam游戏安装在移动硬盘后每次启动都要更新下载Steamworks常见可再发行文件</title>
      <link href="/2023-04-24-steamworks-redownload/"/>
      <url>/2023-04-24-steamworks-redownload/</url>
      
        <content type="html"><![CDATA[<p>希望Steam可以出一个可再发行文件的可选功能 不自动删除无依赖的运行库</p><p>先讲讲我理解的 每个游戏所需的运行库不同 而他们的运行库都存放在Steamworks Shared里面 也就是可再发行文件<br>我随便编一个例子 比如说我有CS:GO这款游戏 它可能需要的运行库是DotNet4.0和VC2013<br>Steam就会帮你下载这些运行库 然后我在移动硬盘中下载了Apex英雄 它可能需要的运行库是DirectX-Jun2010和DotNet4.7<br>当我拔出移动硬盘的时候 检测到Apex英雄没有被下载了 Steam不会考虑那么多 它觉得你电脑里面不存在就是卸载了 于是把Apex英雄依赖的两个运行库DirectX-Jun2010和DotNet4.7删除了<br>当你再下载这个游戏的时候 运行库再一并下载 或者是其他游戏有依赖这个运行库的时候<br>这就导致 我每次插上&#x2F;拔下移动硬盘 需要更新Steamworks Shared<br>拔下的时候 是检测到多于的运行库 帮你删除掉 可以发现是一瞬间完成的<br>插上的时候 是检测到你下载的游戏依赖的运行库没有下载 所以出现下载条帮你下载 而且游戏多基本上依赖的运行库就多种多样 我以前没设置的时候每次要更新700M 要崩溃了</p><p>我的做法是<br>我将steamapps内的Stemworks Shared文件夹(约1.1GB)设置权限 在安全选项卡去掉Authenticated Users和Users的删除权限<br>Steam在你拔下移动硬盘的时候会出现下载任务 尝试删除多余的运行库 但是由于没有管理员权限会删不掉 这时候提示你缺少文件权限missing file privileges而无法完成这个下载任务<br>但是这时候你运行一些需要运行库的游戏的时候 无法运行 不论你运行什么都会提示这条missing顺带给你一个没有权限的路径(除了少部分无需运行库的小游戏可以直接运行)<br>当你插上硬盘的时候也就无需再下载一遍运行库了</p><p>我的这个做法主要是解决我这种外接电源的硬盘盒 电脑开机自启动Steam检测不到硬盘就会自己删掉多于的运行库导致我很苦恼<br>如果你想要在不接移动硬盘的时候仍旧可以正常游玩其他游戏 你可以备份Steamworks Shared文件夹 也不大 我的是1.1GB 不接移动硬盘会自动删除 接上移动硬盘的时候再复制覆盖到原文件夹 我有时候会这样做<br>希望valve能考虑到这些问题</p><p>Steam它这个烦人就烦在 即使你电脑里面有必要的运行库了 但是照样会给你下载安装包 以备不时之需</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
